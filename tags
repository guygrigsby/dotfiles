!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/9c285d3/
<C-L>	.vimrc	/^nnoremap <C-L> :nohl<CR><C-L>$/;"	m
<Down>	.vimrc	/^nnoremap <Down> <NOP>$/;"	m
<Leader>+	.vimrc	/^nnoremap <silent> <Leader>+ :exe "resize " . (winheight(0) * 3\/2)<CR>$/;"	m
<Leader>-	.vimrc	/^nnoremap <silent> <Leader>- :exe "resize " . (winheight(0) * 2\/3)<CR>$/;"	m
<Leader>db	ftplugin/go.vim	/^nmap <Leader>db <Plug>(go-doc-browser-browser)$/;"	m
<Leader>ds	ftplugin/go.vim	/^nmap <Leader>ds <Plug>(go-def-split)$/;"	m
<Leader>dv	ftplugin/go.vim	/^nmap <Leader>dv <Plug>(go-def-vertical)$/;"	m
<Leader>gd	ftplugin/go.vim	/^nmap <Leader>gd <Plug>(go-doc)$/;"	m
<Leader>gg	ftplugin/go.vim	/^nmap <Leader>gg <Plug>(go-import)$/;"	m
<Leader>s	ftplugin/go.vim	/^nmap <Leader>s <Plug>(go-implements)$/;"	m
<Left>	.vimrc	/^nnoremap <Left> <NOP>$/;"	m
<Right>	.vimrc	/^nnoremap <Right> <NOP>$/;"	m
<Up>	.vimrc	/^nnoremap <Up> <NOP>$/;"	m
<leader>b	ftplugin/go.vim	/^nmap <leader>b :<C-u>call <SID>build_go_files()<CR>$/;"	m
<leader>dv	.vimrc	/^nnoremap <leader>dv :vsplit \\| YcmCompleter GoTo$/;"	m
<leader>gd	.vimrc	/^nnoremap <leader>gd :YcmCompleter GoToDeclaration<CR>$/;"	m
<leader>gl	ftplugin/go.vim	/^nmap <leader>gl <Plug>(go-metalinter)$/;"	m
<leader>r	ftplugin/go.vim	/^nmap <leader>r <Plug>(go-run)$/;"	m
<leader>r	ftplugin/python.vim	/^nmap <leader>r :! clear && python % <CR>$/;"	m
<leader>r	ftplugin/rust.vim	/^nnoremap <leader>r :RustRun <CR>$/;"	m
<leader>rt	ftplugin/go.vim	/^nmap <leader>rt <Plug>(go-run-split)$/;"	m
<leader>t	ftplugin/go.vim	/^nmap <leader>t <Plug>(go-test)$/;"	m
COMPREPLY=	.bash_mods/git-completion.bash	/^	COMPREPLY=()$/;"	f
Guy	ftplugin/vim.vim	/^function Guy()$/;"	f
Q	.vimrc	/^nnoremap Q <NOP>$/;"	m
__git_aliased_command	.bash_mods/git-completion.bash	/^__git_aliased_command ()$/;"	f
__git_aliases	.bash_mods/git-completion.bash	/^__git_aliases ()$/;"	f
__git_commands	.bash_mods/git-completion.bash	/^__git_commands () {$/;"	f
__git_complete	.bash_mods/git-completion.bash	/^__git_complete ()$/;"	f
__git_complete_file	.bash_mods/git-completion.bash	/^__git_complete_file ()$/;"	f
__git_complete_force_with_lease	.bash_mods/git-completion.bash	/^__git_complete_force_with_lease ()$/;"	f
__git_complete_index_file	.bash_mods/git-completion.bash	/^__git_complete_index_file ()$/;"	f
__git_complete_remote_or_refspec	.bash_mods/git-completion.bash	/^__git_complete_remote_or_refspec ()$/;"	f
__git_complete_revlist	.bash_mods/git-completion.bash	/^__git_complete_revlist ()$/;"	f
__git_complete_revlist_file	.bash_mods/git-completion.bash	/^__git_complete_revlist_file ()$/;"	f
__git_complete_strategy	.bash_mods/git-completion.bash	/^__git_complete_strategy ()$/;"	f
__git_compute_all_commands	.bash_mods/git-completion.bash	/^__git_compute_all_commands ()$/;"	f
__git_compute_merge_strategies	.bash_mods/git-completion.bash	/^__git_compute_merge_strategies ()$/;"	f
__git_compute_porcelain_commands	.bash_mods/git-completion.bash	/^__git_compute_porcelain_commands ()$/;"	f
__git_config_get_set_variables	.bash_mods/git-completion.bash	/^__git_config_get_set_variables ()$/;"	f
__git_count_arguments	.bash_mods/git-completion.bash	/^__git_count_arguments ()$/;"	f
__git_eread	.bash_mods/git-prompt.sh	/^__git_eread ()$/;"	f
__git_find_on_cmdline	.bash_mods/git-completion.bash	/^__git_find_on_cmdline ()$/;"	f
__git_func_wrap	.bash_mods/git-completion.bash	/^__git_func_wrap ()$/;"	f
__git_get_config_variables	.bash_mods/git-completion.bash	/^__git_get_config_variables ()$/;"	f
__git_has_doubledash	.bash_mods/git-completion.bash	/^__git_has_doubledash ()$/;"	f
__git_heads	.bash_mods/git-completion.bash	/^__git_heads ()$/;"	f
__git_index_files	.bash_mods/git-completion.bash	/^__git_index_files ()$/;"	f
__git_list_all_commands	.bash_mods/git-completion.bash	/^__git_list_all_commands ()$/;"	f
__git_list_merge_strategies	.bash_mods/git-completion.bash	/^__git_list_merge_strategies ()$/;"	f
__git_list_porcelain_commands	.bash_mods/git-completion.bash	/^__git_list_porcelain_commands ()$/;"	f
__git_ls_files_helper	.bash_mods/git-completion.bash	/^__git_ls_files_helper ()$/;"	f
__git_main	.bash_mods/git-completion.bash	/^__git_main ()$/;"	f
__git_match_ctag	.bash_mods/git-completion.bash	/^__git_match_ctag() {$/;"	f
__git_pretty_aliases	.bash_mods/git-completion.bash	/^__git_pretty_aliases ()$/;"	f
__git_ps1	.bash_mods/git-prompt.sh	/^__git_ps1 ()$/;"	f
__git_ps1_colorize_gitstring	.bash_mods/git-prompt.sh	/^__git_ps1_colorize_gitstring ()$/;"	f
__git_ps1_show_upstream	.bash_mods/git-prompt.sh	/^__git_ps1_show_upstream ()$/;"	f
__git_reassemble_comp_words_by_ref	.bash_mods/git-completion.bash	/^__git_reassemble_comp_words_by_ref()$/;"	f
__git_refs	.bash_mods/git-completion.bash	/^__git_refs ()$/;"	f
__git_refs2	.bash_mods/git-completion.bash	/^__git_refs2 ()$/;"	f
__git_refs_remotes	.bash_mods/git-completion.bash	/^__git_refs_remotes ()$/;"	f
__git_remotes	.bash_mods/git-completion.bash	/^__git_remotes ()$/;"	f
__git_tags	.bash_mods/git-completion.bash	/^__git_tags ()$/;"	f
__gitcomp	.bash_mods/git-completion.bash	/^	__gitcomp ()$/;"	f
__gitcomp	.bash_mods/git-completion.bash	/^__gitcomp ()$/;"	f
__gitcomp_file	.bash_mods/git-completion.bash	/^	__gitcomp_file ()$/;"	f
__gitcomp_file	.bash_mods/git-completion.bash	/^__gitcomp_file ()$/;"	f
__gitcomp_nl	.bash_mods/git-completion.bash	/^	__gitcomp_nl ()$/;"	f
__gitcomp_nl	.bash_mods/git-completion.bash	/^__gitcomp_nl ()$/;"	f
__gitcomp_nl_append	.bash_mods/git-completion.bash	/^__gitcomp_nl_append ()$/;"	f
__gitcompadd	.bash_mods/git-completion.bash	/^__gitcompadd ()$/;"	f
__gitcompappend	.bash_mods/git-completion.bash	/^__gitcompappend ()$/;"	f
__gitdir	.bash_mods/git-completion.bash	/^__gitdir ()$/;"	f
__gitk_main	.bash_mods/git-completion.bash	/^__gitk_main ()$/;"	f
_get_comp_words_by_ref	.bash_mods/git-completion.bash	/^_get_comp_words_by_ref ()$/;"	f
_git	.bash_mods/git-completion.bash	/^	_git ()$/;"	f
_git	.bash_mods/git-completion.bash	/^_git ()$/;"	f
_git_add	.bash_mods/git-completion.bash	/^_git_add ()$/;"	f
_git_am	.bash_mods/git-completion.bash	/^_git_am ()$/;"	f
_git_apply	.bash_mods/git-completion.bash	/^_git_apply ()$/;"	f
_git_archive	.bash_mods/git-completion.bash	/^_git_archive ()$/;"	f
_git_bisect	.bash_mods/git-completion.bash	/^_git_bisect ()$/;"	f
_git_branch	.bash_mods/git-completion.bash	/^_git_branch ()$/;"	f
_git_bundle	.bash_mods/git-completion.bash	/^_git_bundle ()$/;"	f
_git_checkout	.bash_mods/git-completion.bash	/^_git_checkout ()$/;"	f
_git_cherry	.bash_mods/git-completion.bash	/^_git_cherry ()$/;"	f
_git_cherry_pick	.bash_mods/git-completion.bash	/^_git_cherry_pick ()$/;"	f
_git_clean	.bash_mods/git-completion.bash	/^_git_clean ()$/;"	f
_git_clone	.bash_mods/git-completion.bash	/^_git_clone ()$/;"	f
_git_commit	.bash_mods/git-completion.bash	/^_git_commit ()$/;"	f
_git_config	.bash_mods/git-completion.bash	/^_git_config ()$/;"	f
_git_describe	.bash_mods/git-completion.bash	/^_git_describe ()$/;"	f
_git_diff	.bash_mods/git-completion.bash	/^_git_diff ()$/;"	f
_git_difftool	.bash_mods/git-completion.bash	/^_git_difftool ()$/;"	f
_git_fetch	.bash_mods/git-completion.bash	/^_git_fetch ()$/;"	f
_git_format_patch	.bash_mods/git-completion.bash	/^_git_format_patch ()$/;"	f
_git_fsck	.bash_mods/git-completion.bash	/^_git_fsck ()$/;"	f
_git_gc	.bash_mods/git-completion.bash	/^_git_gc ()$/;"	f
_git_gitk	.bash_mods/git-completion.bash	/^_git_gitk ()$/;"	f
_git_grep	.bash_mods/git-completion.bash	/^_git_grep ()$/;"	f
_git_help	.bash_mods/git-completion.bash	/^_git_help ()$/;"	f
_git_init	.bash_mods/git-completion.bash	/^_git_init ()$/;"	f
_git_log	.bash_mods/git-completion.bash	/^_git_log ()$/;"	f
_git_ls_files	.bash_mods/git-completion.bash	/^_git_ls_files ()$/;"	f
_git_ls_remote	.bash_mods/git-completion.bash	/^_git_ls_remote ()$/;"	f
_git_ls_tree	.bash_mods/git-completion.bash	/^_git_ls_tree ()$/;"	f
_git_merge	.bash_mods/git-completion.bash	/^_git_merge ()$/;"	f
_git_merge_base	.bash_mods/git-completion.bash	/^_git_merge_base ()$/;"	f
_git_mergetool	.bash_mods/git-completion.bash	/^_git_mergetool ()$/;"	f
_git_mv	.bash_mods/git-completion.bash	/^_git_mv ()$/;"	f
_git_name_rev	.bash_mods/git-completion.bash	/^_git_name_rev ()$/;"	f
_git_notes	.bash_mods/git-completion.bash	/^_git_notes ()$/;"	f
_git_pull	.bash_mods/git-completion.bash	/^_git_pull ()$/;"	f
_git_push	.bash_mods/git-completion.bash	/^_git_push ()$/;"	f
_git_rebase	.bash_mods/git-completion.bash	/^_git_rebase ()$/;"	f
_git_reflog	.bash_mods/git-completion.bash	/^_git_reflog ()$/;"	f
_git_remote	.bash_mods/git-completion.bash	/^_git_remote ()$/;"	f
_git_replace	.bash_mods/git-completion.bash	/^_git_replace ()$/;"	f
_git_reset	.bash_mods/git-completion.bash	/^_git_reset ()$/;"	f
_git_revert	.bash_mods/git-completion.bash	/^_git_revert ()$/;"	f
_git_rm	.bash_mods/git-completion.bash	/^_git_rm ()$/;"	f
_git_send_email	.bash_mods/git-completion.bash	/^_git_send_email ()$/;"	f
_git_shortlog	.bash_mods/git-completion.bash	/^_git_shortlog ()$/;"	f
_git_show	.bash_mods/git-completion.bash	/^_git_show ()$/;"	f
_git_show_branch	.bash_mods/git-completion.bash	/^_git_show_branch ()$/;"	f
_git_stage	.bash_mods/git-completion.bash	/^_git_stage ()$/;"	f
_git_stash	.bash_mods/git-completion.bash	/^_git_stash ()$/;"	f
_git_submodule	.bash_mods/git-completion.bash	/^_git_submodule ()$/;"	f
_git_svn	.bash_mods/git-completion.bash	/^_git_svn ()$/;"	f
_git_tag	.bash_mods/git-completion.bash	/^_git_tag ()$/;"	f
_git_whatchanged	.bash_mods/git-completion.bash	/^_git_whatchanged ()$/;"	f
_gitk	.bash_mods/git-completion.bash	/^_gitk ()$/;"	f
definition	.bash_mods/git-completion.bash	/^		\\(\\))   : skip parens of shell function definition ;;$/;"	f
g:AutoPairsFlyMode	.vimrc	/^let g:AutoPairsFlyMode = 0$/;"	v
g:airline#extensions#tabline#enabled	.vimrc	/^let g:airline#extensions#tabline#enabled = 1$/;"	v
g:airline_left_sep	.vimrc	/^let g:airline_left_sep = '»'$/;"	v
g:airline_left_sep	.vimrc	/^let g:airline_left_sep = '▶'$/;"	v
g:airline_powerline_fonts	.vimrc	/^let g:airline_powerline_fonts = 1$/;"	v
g:airline_right_sep	.vimrc	/^let g:airline_right_sep = '«'$/;"	v
g:airline_right_sep	.vimrc	/^let g:airline_right_sep = '◀'$/;"	v
g:airline_solarized_bg	.vimrc	/^let g:airline_solarized_bg='dark'$/;"	v
g:airline_symbols	.vimrc	/^    let g:airline_symbols = {}$/;"	v
g:airline_symbols	.vimrc	/^let g:airline_symbols.branch = '⎇'$/;"	v
g:airline_symbols	.vimrc	/^let g:airline_symbols.linenr = '¶'$/;"	v
g:airline_symbols	.vimrc	/^let g:airline_symbols.linenr = '␊'$/;"	v
g:airline_symbols	.vimrc	/^let g:airline_symbols.linenr = '␤'$/;"	v
g:airline_symbols	.vimrc	/^let g:airline_symbols.paste = 'Þ'$/;"	v
g:airline_symbols	.vimrc	/^let g:airline_symbols.paste = 'ρ'$/;"	v
g:airline_symbols	.vimrc	/^let g:airline_symbols.paste = '∥'$/;"	v
g:airline_symbols	.vimrc	/^let g:airline_symbols.whitespace = 'Ξ'$/;"	v
g:airline_theme	.vimrc	/^let g:airline_theme='dark'$/;"	v
g:ctrlp_cmd	.vimrc	/^let g:ctrlp_cmd = 'CtrlPLastMode'$/;"	v
g:ctrlp_extensions	.vimrc	/^let g:ctrlp_extensions = ['line']$/;"	v
g:ctrlp_use_caching	.vimrc	/^        let g:ctrlp_use_caching = 0$/;"	v
g:ctrlp_user_command	.vimrc	/^        let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'$/;"	v
g:ctrlp_working_path_mode	.vimrc	/^let g:ctrlp_working_path_mode = 'rw'$/;"	v
g:go_fmt_command	ftplugin/go.vim	/^let g:go_fmt_command ="goimports"$/;"	v
g:go_term_enabled	ftplugin/go.vim	/^let g:go_term_enabled = 1$/;"	v
g:go_term_mode	ftplugin/go.vim	/^let g:go_term_mode = "split"$/;"	v
g:notes_directories	.vimrc	/^let g:notes_directories = ['~\/Google Drive\/notes']$/;"	v
g:rustfmt_autosave	ftplugin/rust.vim	/^let g:rustfmt_autosave = 1$/;"	v
g:tagbar_type_go	.vimrc	/^let g:tagbar_type_go = {$/;"	v
g:ycm_auto_trigger	.vimrc	/^let g:ycm_auto_trigger = 1$/;"	v
g:ycm_extra_conf_vim_data	.vimrc	/^let g:ycm_extra_conf_vim_data = [$/;"	v
g:ycm_goto_buffer_command	.vimrc	/^let g:ycm_goto_buffer_command="split"$/;"	v
g:ycm_python_interpreter_path	.vimrc	/^let g:ycm_python_interpreter_path = ''$/;"	v
g:ycm_python_sys_path	.vimrc	/^let g:ycm_python_sys_path = []$/;"	v
g:ycm_rust_src_path	ftplugin/rust.vim	/^let g:ycm_rust_src_path = $RUST_SRC_PATH$/;"	v
s:build_go_files	ftplugin/go.vim	/^function! s:build_go_files()$/;"	f
svn_remote=	.bash_mods/git-prompt.sh	/^	svn_remote=()$/;"	f
